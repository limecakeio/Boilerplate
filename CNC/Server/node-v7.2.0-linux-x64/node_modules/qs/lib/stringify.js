'use strict';

let Utils = require('./utils');

let arrayPrefixGenerators = {
	brackets: function brackets(prefix) {
		return prefix + '[]';
	},
	indices: function indices(prefix, key) {
		return prefix + '[' + key + ']';
	},
	repeat: function repeat(prefix) {
		return prefix;
	}
};

let defaults = {
	delimiter: '&',
	strictNullHandling: false,
	skipNulls: false,
	encode: true,
	encoder: Utils.encode
};

let stringify = function stringify(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots) {
	let obj = object;
	if (typeof filter === 'function') {
		obj = filter(prefix, obj);
	} else if (obj instanceof Date) {
		obj = obj.toISOString();
	} else if (obj === null) {
		if (strictNullHandling) {
			return encoder ? encoder(prefix) : prefix;
		}

		obj = '';
	}

	if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || Utils.isBuffer(obj)) {
		if (encoder) {
			return [ encoder(prefix) + '=' + encoder(obj) ];
		}
		return [ prefix + '=' + String(obj) ];
	}

	let values = [];

	if (typeof obj === 'undefined') {
		return values;
	}

	let objKeys;
	if (Array.isArray(filter)) {
		objKeys = filter;
	} else {
		let keys = Object.keys(obj);
		objKeys = sort ? keys.sort(sort) : keys;
	}

	for (let i = 0; i < objKeys.length; ++i) {
		let key = objKeys[i];

		if (skipNulls && obj[key] === null) {
			continue;
		}

		if (Array.isArray(obj)) {
			values = values.concat(stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots));
		} else {
			values = values.concat(stringify(obj[key], prefix + (allowDots ? '.' + key : '[' + key + ']'), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots));
		}
	}

	return values;
};

module.exports = function (object, opts) {
	let obj = object;
	let options = opts || {};
	let delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
	let strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
	let skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
	let encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
	let encoder = encode ? (typeof options.encoder === 'function' ? options.encoder : defaults.encoder) : null;
	let sort = typeof options.sort === 'function' ? options.sort : null;
	let allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
	let objKeys;
	let filter;

	if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
		throw new TypeError('Encoder has to be a function.');
	}

	if (typeof options.filter === 'function') {
		filter = options.filter;
		obj = filter('', obj);
	} else if (Array.isArray(options.filter)) {
		objKeys = filter = options.filter;
	}

	let keys = [];

	if (typeof obj !== 'object' || obj === null) {
		return '';
	}

	let arrayFormat;
	if (options.arrayFormat in arrayPrefixGenerators) {
		arrayFormat = options.arrayFormat;
	} else if ('indices' in options) {
		arrayFormat = options.indices ? 'indices' : 'repeat';
	} else {
		arrayFormat = 'indices';
	}

	let generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

	if (!objKeys) {
		objKeys = Object.keys(obj);
	}

	if (sort) {
		objKeys.sort(sort);
	}

	for (let i = 0; i < objKeys.length; ++i) {
		let key = objKeys[i];

		if (skipNulls && obj[key] === null) {
			continue;
		}

		keys = keys.concat(stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots));
	}

	return keys.join(delimiter);
};
