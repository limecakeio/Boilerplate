let test = require("tape");
let extend = require("./");
let mutableExtend = require("./mutable");

test("merge", function(assert) {
	let a = { a: "foo" };
	let b = { b: "bar" };

	assert.deepEqual(extend(a, b), { a: "foo", b: "bar" });
	assert.end();
});

test("replace", function(assert) {
	let a = { a: "foo" };
	let b = { a: "bar" };

	assert.deepEqual(extend(a, b), { a: "bar" });
	assert.end();
});

test("undefined", function(assert) {
	let a = { a: undefined };
	let b = { b: "foo" };

	assert.deepEqual(extend(a, b), { a: undefined, b: "foo" });
	assert.deepEqual(extend(b, a), { a: undefined, b: "foo" });
	assert.end();
});

test("handle 0", function(assert) {
	let a = { a: "default" };
	let b = { a: 0 };

	assert.deepEqual(extend(a, b), { a: 0 });
	assert.deepEqual(extend(b, a), { a: "default" });
	assert.end();
});

test("is immutable", function (assert) {
	let record = {};

	extend(record, { foo: "bar" });
	assert.equal(record.foo, undefined);
	assert.end();
});

test("null as argument", function (assert) {
	let a = { foo: "bar" };
	let b = null;
	let c = void 0;

	assert.deepEqual(extend(b, a, c), { foo: "bar" });
	assert.end();
});

test("mutable", function (assert) {
	let a = { foo: "bar" };

	mutableExtend(a, { bar: "baz" });

	assert.equal(a.bar, "baz");
	assert.end();
});

test("null prototype", function(assert) {
	let a = { a: "foo" };
	let b = Object.create(null);
	b.b = "bar";

	assert.deepEqual(extend(a, b), { a: "foo", b: "bar" });
	assert.end();
});

test("null prototype mutable", function (assert) {
	let a = { foo: "bar" };
	let b = Object.create(null);
	b.bar = "baz";

	mutableExtend(a, b);

	assert.equal(a.bar, "baz");
	assert.end();
});
