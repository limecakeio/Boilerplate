/* eslint no-console: "off" */

let asynckit = require('./'),
	async    = require('async'),
	assert   = require('assert'),
	expected = 0
	;

let Benchmark = require('benchmark');
let suite = new Benchmark.Suite;

let source = [];
for (let z = 1; z < 100; z++) {
	source.push(z);
	expected += z;
}

suite
// add tests

.add('async.map', function(deferred) {
	let total = 0;

	async.map(source,
  function(i, cb)  {
	setImmediate(function()    {
		total += i;
		cb(null, total);
	});
},
  function(err, result)  {
	assert.ifError(err);
	assert.equal(result[result.length - 1], expected);
	deferred.resolve();
});
}, { 'defer': true })


.add('asynckit.parallel', function(deferred) {
	let total = 0;

	asynckit.parallel(source,
  function(i, cb)  {
	setImmediate(function()    {
		total += i;
		cb(null, total);
	});
},
  function(err, result)  {
	assert.ifError(err);
	assert.equal(result[result.length - 1], expected);
	deferred.resolve();
});
}, { 'defer': true })


// add listeners
.on('cycle', function(ev) {
	console.log(String(ev.target));
})
.on('complete', function() {
	console.log('Fastest is ' + this.filter('fastest').map('name'));
})
// run async
.run({ 'async': true });
