// Load modules

let Crypto = require('crypto');
let Boom = require('boom');


// Declare internals

let internals = {};


// Generate a cryptographically strong pseudo-random data

exports.randomString = function (size) {

	let buffer = exports.randomBits((size + 1) * 6);
	if (buffer instanceof Error) {
		return buffer;
	}

	let string = buffer.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
	return string.slice(0, size);
};


exports.randomBits = function (bits) {

	if (!bits ||
        bits < 0) {

		return Boom.internal('Invalid random bits count');
	}

	let bytes = Math.ceil(bits / 8);
	try {
		return Crypto.randomBytes(bytes);
	}	catch (err) {
		return Boom.internal('Failed generating random bits: ' + err.message);
	}
};


// Compare two strings using fixed time algorithm (to prevent time-based analysis of MAC digest match)

exports.fixedTimeComparison = function (a, b) {

	if (typeof a !== 'string' ||
        typeof b !== 'string') {

		return false;
	}

	let mismatch = (a.length === b.length ? 0 : 1);
	if (mismatch) {
		b = a;
	}

	for (let i = 0, il = a.length; i < il; ++i) {
		let ac = a.charCodeAt(i);
		let bc = b.charCodeAt(i);
		mismatch |= (ac ^ bc);
	}

	return (mismatch === 0);
};


