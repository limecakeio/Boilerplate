(function(f) {
	if (typeof exports === "object" && typeof module !== "undefined") {
		module.exports = f();
	} else if (typeof define === "function" && define.amd) {
		define([], f);
	} else {
		let g; if (typeof window !== "undefined") {
			g = window;
		} else if (typeof global !== "undefined") {
			g = global;
		} else if (typeof self !== "undefined") {
			g = self;
		} else {
			g = this;
		}g.Qs = f();
	}
})(function() {
	let define, module, exports; return (function e(t, n, r) {
		function s(o, u) {
			if (!n[o]) {
				if (!t[o]) {
					let a = typeof require === "function" && require; if (!u && a) return a(o, !0); if (i) return i(o, !0); let f = new Error("Cannot find module '" + o + "'"); throw f.code = "MODULE_NOT_FOUND", f;
				} let l = n[o] = { exports:{} }; t[o][0].call(l.exports, function(e) {
					let n = t[o][1][e]; return s(n ? n : e);
				}, l, l.exports, e, t, n, r);
			} return n[o].exports;
		} let i = typeof require === "function" && require; for (let o = 0; o < r.length; o++)s(r[o]); return s;
	})({ 1:[ function(require, module, exports) {
		'use strict';

		let Stringify = require('./stringify');
		let Parse = require('./parse');

		module.exports = {
			stringify: Stringify,
			parse: Parse
		};

	}, { "./parse":2, "./stringify":3 }], 2:[ function(require, module, exports) {
		'use strict';

		let Utils = require('./utils');

		let has = Object.prototype.hasOwnProperty;

		let defaults = {
			delimiter: '&',
			depth: 5,
			arrayLimit: 20,
			parameterLimit: 1000,
			strictNullHandling: false,
			plainObjects: false,
			allowPrototypes: false,
			allowDots: false,
			decoder: Utils.decode
		};

		let parseValues = function parseValues(str, options) {
			let obj = {};
			let parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

			for (let i = 0; i < parts.length; ++i) {
				let part = parts[i];
				let pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

				var key, val;
				if (pos === -1) {
					key = options.decoder(part);
					val = options.strictNullHandling ? null : '';
				} else {
					key = options.decoder(part.slice(0, pos));
					val = options.decoder(part.slice(pos + 1));
				}
				if (has.call(obj, key)) {
					obj[key] = [].concat(obj[key]).concat(val);
				} else {
					obj[key] = val;
				}
			}

			return obj;
		};

		let parseObject = function parseObject(chain, val, options) {
			if (!chain.length) {
				return val;
			}

			let root = chain.shift();

			let obj;
			if (root === '[]') {
				obj = [];
				obj = obj.concat(parseObject(chain, val, options));
			} else {
				obj = options.plainObjects ? Object.create(null) : {};
				let cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
				let index = parseInt(cleanRoot, 10);
				if (
            !isNaN(index) &&
            root !== cleanRoot &&
            String(index) === cleanRoot &&
            index >= 0 &&
            (options.parseArrays && index <= options.arrayLimit)
        ) {
					obj = [];
					obj[index] = parseObject(chain, val, options);
				} else {
					obj[cleanRoot] = parseObject(chain, val, options);
				}
			}

			return obj;
		};

		let parseKeys = function parseKeys(givenKey, val, options) {
			if (!givenKey) {
				return;
			}

    // Transform dot notation to bracket notation
			let key = options.allowDots ? givenKey.replace(/\.([^\.\[]+)/g, '[$1]') : givenKey;

    // The regex chunks

			let parent = /^([^\[\]]*)/;
			let child = /(\[[^\[\]]*\])/g;

    // Get the parent

			let segment = parent.exec(key);

    // Stash the parent if it exists

			let keys = [];
			if (segment[1]) {
        // If we aren't using plain objects, optionally prefix keys
        // that would overwrite object prototype properties
				if (!options.plainObjects && has.call(Object.prototype, segment[1])) {
					if (!options.allowPrototypes) {
						return;
					}
				}

				keys.push(segment[1]);
			}

    // Loop through children appending to the array until we hit depth

			let i = 0;
			while ((segment = child.exec(key)) !== null && i < options.depth) {
				i += 1;
				if (!options.plainObjects && has.call(Object.prototype, segment[1].replace(/\[|\]/g, ''))) {
					if (!options.allowPrototypes) {
						continue;
					}
				}
				keys.push(segment[1]);
			}

    // If there's a remainder, just add whatever is left

			if (segment) {
				keys.push('[' + key.slice(segment.index) + ']');
			}

			return parseObject(keys, val, options);
		};

		module.exports = function (str, opts) {
			let options = opts || {};

			if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
				throw new TypeError('Decoder has to be a function.');
			}

			options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
			options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
			options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
			options.parseArrays = options.parseArrays !== false;
			options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
			options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;
			options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
			options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
			options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
			options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;

			if (str === '' || str === null || typeof str === 'undefined') {
				return options.plainObjects ? Object.create(null) : {};
			}

			let tempObj = typeof str === 'string' ? parseValues(str, options) : str;
			let obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

			let keys = Object.keys(tempObj);
			for (let i = 0; i < keys.length; ++i) {
				let key = keys[i];
				let newObj = parseKeys(key, tempObj[key], options);
				obj = Utils.merge(obj, newObj, options);
			}

			return Utils.compact(obj);
		};

	}, { "./utils":4 }], 3:[ function(require, module, exports) {
		'use strict';

		let Utils = require('./utils');

		let arrayPrefixGenerators = {
			brackets: function brackets(prefix) {
				return prefix + '[]';
			},
			indices: function indices(prefix, key) {
				return prefix + '[' + key + ']';
			},
			repeat: function repeat(prefix) {
				return prefix;
			}
		};

		let defaults = {
			delimiter: '&',
			strictNullHandling: false,
			skipNulls: false,
			encode: true,
			encoder: Utils.encode
		};

		let stringify = function stringify(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots) {
			let obj = object;
			if (typeof filter === 'function') {
				obj = filter(prefix, obj);
			} else if (obj instanceof Date) {
				obj = obj.toISOString();
			} else if (obj === null) {
			if (strictNullHandling) {
				return encoder ? encoder(prefix) : prefix;
			}

			obj = '';
		}

			if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || Utils.isBuffer(obj)) {
				if (encoder) {
					return [ encoder(prefix) + '=' + encoder(obj) ];
				}
				return [ prefix + '=' + String(obj) ];
			}

			let values = [];

			if (typeof obj === 'undefined') {
				return values;
			}

			let objKeys;
			if (Array.isArray(filter)) {
				objKeys = filter;
			} else {
				let keys = Object.keys(obj);
				objKeys = sort ? keys.sort(sort) : keys;
			}

			for (let i = 0; i < objKeys.length; ++i) {
				let key = objKeys[i];

				if (skipNulls && obj[key] === null) {
					continue;
				}

				if (Array.isArray(obj)) {
					values = values.concat(stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots));
				} else {
					values = values.concat(stringify(obj[key], prefix + (allowDots ? '.' + key : '[' + key + ']'), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots));
				}
			}

			return values;
		};

		module.exports = function (object, opts) {
			let obj = object;
			let options = opts || {};
			let delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
			let strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
			let skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
			let encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
			let encoder = encode ? (typeof options.encoder === 'function' ? options.encoder : defaults.encoder) : null;
			let sort = typeof options.sort === 'function' ? options.sort : null;
			let allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
			let objKeys;
			let filter;

			if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
				throw new TypeError('Encoder has to be a function.');
			}

			if (typeof options.filter === 'function') {
				filter = options.filter;
				obj = filter('', obj);
			} else if (Array.isArray(options.filter)) {
				objKeys = filter = options.filter;
			}

			let keys = [];

			if (typeof obj !== 'object' || obj === null) {
				return '';
			}

			let arrayFormat;
			if (options.arrayFormat in arrayPrefixGenerators) {
				arrayFormat = options.arrayFormat;
			} else if ('indices' in options) {
				arrayFormat = options.indices ? 'indices' : 'repeat';
			} else {
				arrayFormat = 'indices';
			}

			let generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

			if (!objKeys) {
				objKeys = Object.keys(obj);
			}

			if (sort) {
				objKeys.sort(sort);
			}

			for (let i = 0; i < objKeys.length; ++i) {
				let key = objKeys[i];

				if (skipNulls && obj[key] === null) {
					continue;
				}

				keys = keys.concat(stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots));
			}

			return keys.join(delimiter);
		};

	}, { "./utils":4 }], 4:[ function(require, module, exports) {
		'use strict';

		let hexTable = (function () {
			let array = new Array(256);
			for (let i = 0; i < 256; ++i) {
				array[i] = '%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase();
			}

			return array;
		}());

		exports.arrayToObject = function (source, options) {
			let obj = options.plainObjects ? Object.create(null) : {};
			for (let i = 0; i < source.length; ++i) {
				if (typeof source[i] !== 'undefined') {
				obj[i] = source[i];
			}
			}

			return obj;
		};

		exports.merge = function (target, source, options) {
			if (!source) {
				return target;
			}

			if (typeof source !== 'object') {
				if (Array.isArray(target)) {
				target.push(source);
			} else if (typeof target === 'object') {
				target[source] = true;
			} else {
				return [ target, source ];
			}

				return target;
			}

			if (typeof target !== 'object') {
				return [ target ].concat(source);
			}

			let mergeTarget = target;
			if (Array.isArray(target) && !Array.isArray(source)) {
				mergeTarget = exports.arrayToObject(target, options);
			}

			return Object.keys(source).reduce(function (acc, key) {
				let value = source[key];

				if (Object.prototype.hasOwnProperty.call(acc, key)) {
				acc[key] = exports.merge(acc[key], value, options);
			} else {
				acc[key] = value;
			}
				return acc;
			}, mergeTarget);
		};

		exports.decode = function (str) {
			try {
				return decodeURIComponent(str.replace(/\+/g, ' '));
			} catch (e) {
				return str;
			}
		};

		exports.encode = function (str) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
			if (str.length === 0) {
				return str;
			}

			let string = typeof str === 'string' ? str : String(str);

			let out = '';
			for (let i = 0; i < string.length; ++i) {
				let c = string.charCodeAt(i);

				if (
            c === 0x2D || // -
            c === 0x2E || // .
            c === 0x5F || // _
            c === 0x7E || // ~
            (c >= 0x30 && c <= 0x39) || // 0-9
            (c >= 0x41 && c <= 0x5A) || // a-z
            (c >= 0x61 && c <= 0x7A) // A-Z
        ) {
				out += string.charAt(i);
				continue;
			}

				if (c < 0x80) {
				out = out + hexTable[c];
				continue;
			}

				if (c < 0x800) {
				out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
				continue;
			}

				if (c < 0xD800 || c >= 0xE000) {
				out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
				continue;
			}

				i += 1;
				c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
				out += hexTable[0xF0 | (c >> 18)] + hexTable[0x80 | ((c >> 12) & 0x3F)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)];
			}

			return out;
		};

		exports.compact = function (obj, references) {
			if (typeof obj !== 'object' || obj === null) {
				return obj;
			}

			let refs = references || [];
			let lookup = refs.indexOf(obj);
			if (lookup !== -1) {
				return refs[lookup];
			}

			refs.push(obj);

			if (Array.isArray(obj)) {
				let compacted = [];

				for (let i = 0; i < obj.length; ++i) {
				if (obj[i] && typeof obj[i] === 'object') {
					compacted.push(exports.compact(obj[i], refs));
				} else if (typeof obj[i] !== 'undefined') {
					compacted.push(obj[i]);
				}
			}

				return compacted;
			}

			let keys = Object.keys(obj);
			for (let j = 0; j < keys.length; ++j) {
				let key = keys[j];
				obj[key] = exports.compact(obj[key], refs);
			}

			return obj;
		};

		exports.isRegExp = function (obj) {
			return Object.prototype.toString.call(obj) === '[object RegExp]';
		};

		exports.isBuffer = function (obj) {
			if (obj === null || typeof obj === 'undefined') {
				return false;
			}

			return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
		};

	}, {}] }, {}, [ 1 ])(1);
});
