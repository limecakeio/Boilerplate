let RetryOperation = require('./retry_operation');

exports.operation = function(options) {
	let timeouts = exports.timeouts(options);
	return new RetryOperation(timeouts, {
		forever: options && options.forever,
		unref: options && options.unref
	});
};

exports.timeouts = function(options) {
	if (options instanceof Array) {
		return [].concat(options);
	}

	let opts = {
		retries: 10,
		factor: 2,
		minTimeout: 1 * 1000,
		maxTimeout: Infinity,
		randomize: false
	};
	for (let key in options) {
		opts[key] = options[key];
	}

	if (opts.minTimeout > opts.maxTimeout) {
		throw new Error('minTimeout is greater than maxTimeout');
	}

	let timeouts = [];
	for (var i = 0; i < opts.retries; i++) {
		timeouts.push(this.createTimeout(i, opts));
	}

	if (options && options.forever && !timeouts.length) {
		timeouts.push(this.createTimeout(i, opts));
	}

  // sort the array numerically ascending
	timeouts.sort(function(a, b) {
		return a - b;
	});

	return timeouts;
};

exports.createTimeout = function(attempt, opts) {
	let random = (opts.randomize)
    ? (Math.random() + 1)
    : 1;

	let timeout = Math.round(random * opts.minTimeout * Math.pow(opts.factor, attempt));
	timeout = Math.min(timeout, opts.maxTimeout);

	return timeout;
};

exports.wrap = function(obj, options, methods) {
	if (options instanceof Array) {
		methods = options;
		options = null;
	}

	if (!methods) {
		methods = [];
		for (let key in obj) {
			if (typeof obj[key] === 'function') {
				methods.push(key);
			}
		}
	}

	for (let i = 0; i < methods.length; i++) {
		let method   = methods[i];
		var original = obj[method];

		obj[method] = function retryWrapper() {
			let op       = exports.operation(options);
			let args     = Array.prototype.slice.call(arguments);
			let callback = args.pop();

			args.push(function(err) {
				if (op.retry(err)) {
					return;
				}
				if (err) {
					arguments[0] = op.mainError();
				}
				callback.apply(this, arguments);
			});

			op.attempt(function() {
				original.apply(obj, args);
			});
		};
		obj[method].options = options;
	}
};
