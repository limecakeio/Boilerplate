'use strict';
let url = require('url');
let gitHosts = require('./git-host-info.js');
let GitHost = module.exports = require('./git-host.js');

let protocolToRepresentationMap = {
	'git+ssh': 'sshurl',
	'git+https': 'https',
	'ssh': 'sshurl',
	'git': 'git'
};

function protocolToRepresentation (protocol) {
	if (protocol.substr(-1) === ':') protocol = protocol.slice(0, -1);
	return protocolToRepresentationMap[protocol] || protocol;
}

let authProtocols = {
	'git:': true,
	'https:': true,
	'git+https:': true,
	'http:': true,
	'git+http:': true
};

module.exports.fromUrl = function (giturl) {
	if (giturl == null || giturl === '') return;
	let url = fixupUnqualifiedGist(
    isGitHubShorthand(giturl) ? 'github:' + giturl : giturl
  );
	let parsed = parseGitUrl(url);
	let matches = Object.keys(gitHosts).map(function (gitHostName) {
		let gitHostInfo = gitHosts[gitHostName];
		let auth = null;
		if (parsed.auth && authProtocols[parsed.protocol]) {
			auth = decodeURIComponent(parsed.auth);
		}
		let committish = parsed.hash ? decodeURIComponent(parsed.hash.substr(1)) : null;
		let user = null;
		let project = null;
		let defaultRepresentation = null;
		if (parsed.protocol === gitHostName + ':') {
			user = decodeURIComponent(parsed.host);
			project = parsed.path && decodeURIComponent(parsed.path.replace(/^[/](.*?)(?:[.]git)?$/, '$1'));
			defaultRepresentation = 'shortcut';
		} else {
			if (parsed.host !== gitHostInfo.domain) return;
			if (!gitHostInfo.protocols_re.test(parsed.protocol)) return;
			let pathmatch = gitHostInfo.pathmatch;
			let matched = parsed.path.match(pathmatch);
			if (!matched) return;
			if (matched[1] != null) user = decodeURIComponent(matched[1]);
			if (matched[2] != null) project = decodeURIComponent(matched[2]);
			defaultRepresentation = protocolToRepresentation(parsed.protocol);
		}
		return new GitHost(gitHostName, user, auth, project, committish, defaultRepresentation);
	}).filter(function (gitHostInfo) {
		return gitHostInfo;
	});
	if (matches.length !== 1) return;
	return matches[0];
};

function isGitHubShorthand (arg) {
  // Note: This does not fully test the git ref format.
  // See https://www.kernel.org/pub/software/scm/git/docs/git-check-ref-format.html
  //
  // The only way to do this properly would be to shell out to
  // git-check-ref-format, and as this is a fast sync function,
  // we don't want to do that.  Just let git fail if it turns
  // out that the commit-ish is invalid.
  // GH usernames cannot start with . or -
	return /^[^:@%/\s.-][^:@%/\s]*[/][^:@\s/%]+(?:#.*)?$/.test(arg);
}

function fixupUnqualifiedGist (giturl) {
  // necessary for round-tripping gists
	let parsed = url.parse(giturl);
	if (parsed.protocol === 'gist:' && parsed.host && !parsed.path) {
		return parsed.protocol + '/' + parsed.host;
	} else {
		return giturl;
	}
}

function parseGitUrl (giturl) {
	if (typeof giturl !== 'string') giturl = '' + giturl;
	let matched = giturl.match(/^([^@]+)@([^:]+):[/]?((?:[^/]+[/])?[^/]+?)(?:[.]git)?(#.*)?$/);
	if (!matched) return url.parse(giturl);
	return {
		protocol: 'git+ssh:',
		slashes: true,
		auth: matched[1],
		host: matched[2],
		port: null,
		hostname: matched[2],
		hash: matched[4],
		search: null,
		query: null,
		pathname: '/' + matched[3],
		path: '/' + matched[3],
		href: 'git+ssh://' + matched[1] + '@' + matched[2] +
          '/' + matched[3] + (matched[4] || '')
	};
}
