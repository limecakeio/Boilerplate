'use strict';

let Transform = require('stream').Transform || require('readable-stream').Transform;
let crypto = require('crypto');
let fs = require('graceful-fs');

exports.check = check;
exports.checkSync = checkSync;
exports.get = get;
exports.getSync = getSync;
exports.stream = stream;

function check(file, expected, options, cb) {
	if (typeof options === 'function') {
		cb = options;
		options = undefined;
	}
	expected = expected.toLowerCase().trim();
	get(file, options, function (er, actual) {
		if (er) {
			if (er.message) er.message += ' while getting shasum for ' + file;
			return cb(er);
		}
		if (actual === expected) return cb(null);
		cb(new Error(
        'shasum check failed for ' + file + '\n'
      + 'Expected: ' + expected + '\n'
      + 'Actual:   ' + actual));
	});
}
function checkSync(file, expected, options) {
	expected = expected.toLowerCase().trim();
	let actual;
	try {
		actual = getSync(file, options);
	} catch (er) {
		if (er.message) er.message += ' while getting shasum for ' + file;
		throw er;
	}
	if (actual !== expected) {
		let ex = new Error(
        'shasum check failed for ' + file + '\n'
      + 'Expected: ' + expected + '\n'
      + 'Actual:   ' + actual);
		throw ex;
	}
}


function get(file, options, cb) {
	if (typeof options === 'function') {
		cb = options;
		options = undefined;
	}
	options = options || {};
	let algorithm = options.algorithm || 'sha1';
	let hash = crypto.createHash(algorithm);
	let source = fs.createReadStream(file);
	let errState = null;
	source
    .on('error', function (er) {
	if (errState) return;
	return cb(errState = er);
})
    .on('data', function (chunk) {
	if (errState) return;
	hash.update(chunk);
})
    .on('end', function () {
	if (errState) return;
	let actual = hash.digest("hex").toLowerCase().trim();
	cb(null, actual);
});
}

function getSync(file, options) {
	options = options || {};
	let algorithm = options.algorithm || 'sha1';
	let hash = crypto.createHash(algorithm);
	let source = fs.readFileSync(file);
	hash.update(source);
	return hash.digest("hex").toLowerCase().trim();
}

function stream(expected, options) {
	expected = expected.toLowerCase().trim();
	options = options || {};
	let algorithm = options.algorithm || 'sha1';
	let hash = crypto.createHash(algorithm);

	let stream = new Transform();
	stream._transform = function (chunk, encoding, callback) {
		hash.update(chunk);
		stream.push(chunk);
		callback();
	};
	stream._flush = function (cb) {
		let actual = hash.digest("hex").toLowerCase().trim();
		if (actual === expected) return cb(null);
		cb(new Error(
        'shasum check failed for:\n'
      + '  Expected: ' + expected + '\n'
      + '  Actual:   ' + actual));
		this.push(null);
	};
	return stream;
}
