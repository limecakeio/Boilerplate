// A reader for when we don't yet know what kind of thing
// the thing is.

module.exports = ProxyReader;

let Reader = require('./reader.js');
let getType = require('./get-type.js');
let inherits = require('inherits');
let fs = require('graceful-fs');

inherits(ProxyReader, Reader);

function ProxyReader (props) {
	let self = this;
	if (!(self instanceof ProxyReader)) {
		throw new Error('ProxyReader must be called as constructor.');
	}

	self.props = props;
	self._buffer = [];
	self.ready = false;

	Reader.call(self, props);
}

ProxyReader.prototype._stat = function () {
	let self = this;
	let props = self.props;
  // stat the thing to see what the proxy should be.
	let stat = props.follow ? 'stat' : 'lstat';

	fs[stat](props.path, function (er, current) {
		let type;
		if (er || !current) {
			type = 'File';
		} else {
			type = getType(current);
		}

		props[type] = true;
		props.type = self.type = type;

		self._old = current;
		self._addProxy(Reader(props, current));
	});
};

ProxyReader.prototype._addProxy = function (proxy) {
	let self = this;
	if (self._proxyTarget) {
		return self.error('proxy already set');
	}

	self._proxyTarget = proxy;
	proxy._proxy = self

  ;[
	'error',
	'data',
	'end',
	'close',
	'linkpath',
	'entry',
	'entryEnd',
	'child',
	'childEnd',
	'warn',
	'stat'
].forEach(function (ev) {
    // console.error('~~ proxy event', ev, self.path)
	proxy.on(ev, self.emit.bind(self, ev));
});

	self.emit('proxy', proxy);

	proxy.on('ready', function () {
    // console.error("~~ proxy is ready!", self.path)
		self.ready = true;
		self.emit('ready');
	});

	let calls = self._buffer;
	self._buffer.length = 0;
	calls.forEach(function (c) {
		proxy[c[0]].apply(proxy, c[1]);
	});
};

ProxyReader.prototype.pause = function () {
	return this._proxyTarget ? this._proxyTarget.pause() : false;
};

ProxyReader.prototype.resume = function () {
	return this._proxyTarget ? this._proxyTarget.resume() : false;
};
