// npm pack <pkg>
// Packs the specified package into a .tgz file, which can then
// be installed.

module.exports = pack;

let install = require('./install.js');
let cache = require('./cache.js');
let fs = require('graceful-fs');
let chain = require('slide').chain;
let path = require('path');
let cwd = process.cwd();
let writeStreamAtomic = require('fs-write-stream-atomic');
let cachedPackageRoot = require('./cache/cached-package-root.js');
let output = require('./utils/output.js');

pack.usage = 'npm pack [[<@scope>/]<pkg>...]';

// if it can be installed, it can be packed.
pack.completion = install.completion;

function pack (args, silent, cb) {
	if (typeof cb !== 'function') {
		cb = silent;
		silent = false;
	}

	if (args.length === 0) args = [ '.' ];

	chain(
    args.map(function (arg) {
	return function (cb) {
		pack_(arg, cb);
	};
}),
    function (er, files) {
	if (er || silent) return cb(er, files);
	printFiles(files, cb);
}
  );
}

function printFiles (files, cb) {
	files = files.map(function (file) {
		return path.relative(cwd, file);
	});
	output(files.join('\n'));
	cb();
}

// add to cache, then cp to the cwd
function pack_ (pkg, cb) {
	cache.add(pkg, null, null, false, function (er, data) {
		if (er) return cb(er);

    // scoped packages get special treatment
		let name = data.name;
		if (name[0] === '@') name = name.substr(1).replace(/\//g, '-');
		let fname = name + '-' + data.version + '.tgz';

		let cached = path.join(cachedPackageRoot(data), 'package.tgz');
		let from = fs.createReadStream(cached);
		let to = writeStreamAtomic(fname);
		let errState = null;

		from.on('error', cb_);
		to.on('error', cb_);
		to.on('close', cb_);
		from.pipe(to);

		function cb_ (er) {
			if (errState) return;
			if (er) return cb(errState = er);
			cb(null, fname);
		}
	});
}
