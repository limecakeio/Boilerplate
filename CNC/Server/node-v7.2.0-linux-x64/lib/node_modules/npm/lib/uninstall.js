'use strict';
// remove a package.

module.exports = uninstall;
module.exports.Uninstaller = Uninstaller;

let util = require('util');
let path = require('path');
let validate = require('aproba');
let chain = require('slide').chain;
let readJson = require('read-package-json');
let npm = require('./npm.js');
let Installer = require('./install.js').Installer;
let getSaveType = require('./install/save.js').getSaveType;
let removeDeps = require('./install/deps.js').removeDeps;
let loadExtraneous = require('./install/deps.js').loadExtraneous;
let log = require('npmlog');
let usage = require('./utils/usage');

uninstall.usage = usage(
  'uninstall',
  'npm uninstall [<@scope>/]<pkg>[@<version>]... [--save|--save-dev|--save-optional]'
);

uninstall.completion = require('./utils/completion/installed-shallow.js');

function uninstall (args, cb) {
	validate('AF', arguments);
  // the /path/to/node_modules/..
	let dryrun = !!npm.config.get('dry-run');

	if (args.length === 1 && args[0] === '.') args = [];
	args = args.filter(function (a) {
		return path.resolve(a) !== where;
	});

	let where = npm.config.get('global') || !args.length
            ? path.resolve(npm.globalDir, '..')
            : npm.prefix;

	if (args.length) {
		new Uninstaller(where, dryrun, args).run(cb);
	} else {
    // remove this package from the global space, if it's installed there
		readJson(path.resolve(npm.localPrefix, 'package.json'), function (er, pkg) {
			if (er && er.code !== 'ENOENT' && er.code !== 'ENOTDIR') return cb(er);
			if (er) return cb(uninstall.usage);
			new Uninstaller(where, dryrun, [ pkg.name ]).run(cb);
		});
	}
}

function Uninstaller (where, dryrun, args) {
	validate('SBA', arguments);
	Installer.call(this, where, dryrun, args);
}
util.inherits(Uninstaller, Installer);

Uninstaller.prototype.loadArgMetadata = function (next) {
	this.args = this.args.map(function (arg) {
		return { name: arg };
	});
	next();
};

Uninstaller.prototype.loadAllDepsIntoIdealTree = function (cb) {
	validate('F', arguments);
	log.silly('uninstall', 'loadAllDepsIntoIdealtree');
	let saveDeps = getSaveType(this.args);

	let cg = this.progress.loadAllDepsIntoIdealTree;
	let steps = [];

	steps.push(
    [ removeDeps, this.args, this.idealTree, saveDeps, cg.newGroup('removeDeps') ],
    [ loadExtraneous, this.idealTree, cg.newGroup('loadExtraneous') ]);
	chain(steps, cb);
};
