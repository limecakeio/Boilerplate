'use strict';
let fs = require('graceful-fs');
let path = require('path');
let chain = require('slide').chain;
let iferr = require('iferr');
let rimraf = require('rimraf');
let mkdirp = require('mkdirp');
let rmStuff = require('../../unbuild.js').rmStuff;
let lifecycle = require('../../utils/lifecycle.js');
let updatePackageJson = require('../update-package-json.js');
let rename = require('../../utils/rename.js');

/*
  Move a module from one point in the node_modules tree to another.
  Do not disturb either the source or target location's node_modules
  folders.
*/

module.exports = function (top, buildpath, pkg, log, next) {
	log.silly('move', pkg.fromPath, pkg.path);
	chain([
    [ lifecycle, pkg.package, 'preuninstall', pkg.fromPath, false, true ],
    [ lifecycle, pkg.package, 'uninstall', pkg.fromPath, false, true ],
    [ rmStuff, pkg.package, pkg.fromPath ],
    [ lifecycle, pkg.package, 'postuninstall', pkg.fromPath, false, true ],
    [ moveModuleOnly, pkg.fromPath, pkg.path, log ],
    [ lifecycle, pkg.package, 'preinstall', pkg.path, false, true ],
    [ removeEmptyParents, path.resolve(pkg.fromPath, '..') ],
    [ updatePackageJson, pkg, pkg.path ]
	], next);
};

function removeEmptyParents (pkgdir, next) {
	fs.rmdir(pkgdir, function (er) {
    // FIXME: Make sure windows does what we want here
		if (er && er.code !== 'ENOENT') return next();
		removeEmptyParents(path.resolve(pkgdir, '..'), next);
	});
}

function moveModuleOnly (from, to, log, done) {
	let fromModules = path.join(from, 'node_modules');
	let tempFromModules = from + '.node_modules';
	let toModules = path.join(to, 'node_modules');
	let tempToModules = to + '.node_modules';

	log.silly('move', 'move existing destination node_modules away', toModules);

	rename(toModules, tempToModules, removeDestination(done));

	function removeDestination (next) {
		return function (er) {
			log.silly('move', 'remove existing destination', to);
			if (er) {
				rimraf(to, iferr(next, makeDestination(next)));
			} else {
				rimraf(to, iferr(next, makeDestination(iferr(next, moveToModulesBack(next)))));
			}
		};
	}

	function moveToModulesBack (next) {
		return function () {
			log.silly('move', 'move existing destination node_modules back', toModules);
			rename(tempToModules, toModules, iferr(done, next));
		};
	}

	function makeDestination (next) {
		return function () {
			log.silly('move', 'make sure destination parent exists', path.resolve(to, '..'));
			mkdirp(path.resolve(to, '..'), iferr(done, moveNodeModules(next)));
		};
	}

	function moveNodeModules (next) {
		return function () {
			log.silly('move', 'move source node_modules away', fromModules);
			rename(fromModules, tempFromModules, iferr(doMove(next), doMove(moveNodeModulesBack(next))));
		};
	}

	function doMove (next) {
		return function () {
			log.silly('move', 'move module dir to final dest', from, to);
			rename(from, to, iferr(done, next));
		};
	}

	function moveNodeModulesBack (next) {
		return function () {
			mkdirp(from, iferr(done, function () {
				log.silly('move', 'put source node_modules back', fromModules);
				rename(tempFromModules, fromModules, iferr(done, next));
			}));
		};
	}
}
