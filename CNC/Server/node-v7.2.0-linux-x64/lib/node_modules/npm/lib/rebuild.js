
module.exports = rebuild;

let readInstalled = require('read-installed');
let semver = require('semver');
let log = require('npmlog');
let npm = require('./npm.js');
let npa = require('npm-package-arg');
let usage = require('./utils/usage');
let output = require('./utils/output.js');

rebuild.usage = usage(
  'rebuild',
  'npm rebuild [[<@scope>/<name>]...]'
);

rebuild.completion = require('./utils/completion/installed-deep.js');

function rebuild (args, cb) {
	let opt = { depth: npm.config.get('depth'), dev: true };
	readInstalled(npm.prefix, opt, function (er, data) {
		log.info('readInstalled', typeof data);
		if (er) return cb(er);
		let set = filter(data, args);
		let folders = Object.keys(set).filter(function (f) {
			return f !== npm.prefix;
		});
		if (!folders.length) return cb();
		log.silly('rebuild set', folders);
		cleanBuild(folders, set, cb);
	});
}

function cleanBuild (folders, set, cb) {
	npm.commands.build(folders, function (er) {
		if (er) return cb(er);
		output(folders.map(function (f) {
			return set[f] + ' ' + f;
		}).join('\n'));
		cb();
	});
}

function filter (data, args, set, seen) {
	if (!set) set = {};
	if (!seen) seen = {};
	if (set.hasOwnProperty(data.path)) return set;
	if (seen.hasOwnProperty(data.path)) return set;
	seen[data.path] = true;
	let pass;
	if (!args.length) pass = true; // rebuild everything
	else if (data.name && data._id) {
		for (let i = 0, l = args.length; i < l; i++) {
			let arg = args[i];
			let nv = npa(arg);
			let n = nv.name;
			let v = nv.rawSpec;
			if (n !== data.name) continue;
			if (!semver.satisfies(data.version, v, true)) continue;
			pass = true;
			break;
		}
	}
	if (pass && data._id) {
		log.verbose('rebuild', 'path, id', [ data.path, data._id ]);
		set[data.path] = data._id;
	}
  // need to also dive through kids, always.
  // since this isn't an install these won't get auto-built unless
  // they're not dependencies.
	Object.keys(data.dependencies || {}).forEach(function (d) {
    // return
		let dep = data.dependencies[d];
		if (typeof dep === 'string') return;
		filter(dep, args, set, seen);
	});
	return set;
}
